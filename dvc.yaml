stages:
  # 1. Pull raw data from DVC remote (SwissBoundaries3D)
  # 2. Create tiles and upload to S3
  prepare:
    cmd: python3 src/0_prepare.py
    deps:
      - src/0_prepare.py
      - data/raw/swissBOUNDARIES3D_1_5_LV95_LN02.gpkg
    params:
      - prepare
    # This is commented because the preapre stage is frozen
    # outs:
    #   - data/prepared/depends.txt
    frozen: true  # For the moment, we don't need to rerun this stage

  # 1. Pull labelstudio annotations from S3
  # 2. Merge into a single JSON file
  # 3. Preprocess the annotations
  # 4. Save it into DVC cache
  preprocess:
    cmd: python3 src/1_preprocess.py
    deps:
      - src/1_preprocess.py
      # - data/prepared/depends.txt  # This is commented because the preapre stage is frozen
    outs:
      - data/preprocessed/annotations.json
    always_changed: true

  # 1. Pull some images from S3
  # 2. Save them into DVC cache
  preview:
    cmd: python3 src/2_preview.py
    deps:
      - src/2_preview.py
      - data/preprocessed/annotations.json
    params: 
      - train.datamodule.setup
    outs:
      - data/preview
  
  # Train the model
  train:
    cmd: python3 src/2_train.py
    deps:
      - src/2_train.py
      - data/preprocessed/annotations.json
    params: 
      - train.datamodule.setup
      - train.model
      - train.training
    outs:
      - lightning_logs:
          persist: true
      - out/model.ckpt
  
  # Convert PyTorch model to BentoML model (TorchScript)
  export:
    cmd: python3 src/3_export.py
    deps:
      - src/3_export.py
      - out/model.ckpt
    params:
      - train.datamodule.setup.batch_size
      - train.datamodule.setup.image_size
      - export.model_name
    outs:
      - out/${export.model_name}.bentomodel

  # Evaluate the model
  evaluate:
    cmd: python3 src/3_evaluate.py
    deps:
      - src/3_evaluate.py
      - out/model.ckpt
    params: 
      - train.datamodule.setup
    outs:
      - data/evaluate
