stages:
  # Pre-train the model
  pre-train:
    cmd: python3 src/0_pre_train.py
    deps:
      - src/0_pre_train.py
      - data/raw/bdappv.zip
    params:
      - pre-train.datamodule.setup
      - pre-train.model
      - pre-train.training
    outs:
      - out/pre-train/model.ckpt
      - out/pre-train/lightning_logs:
          persist: true
    metrics:
      - out/pre-train/metrics.json

  # 1. Pull raw data from DVC remote (SwissBoundaries3D)
  # 2. Create tiles and upload to S3
  prepare:
    cmd: python3 src/0_prepare.py
    deps:
      - src/0_prepare.py
      - data/raw/swissBOUNDARIES3D_1_5_LV95_LN02.gpkg
    params:
      - prepare
    outs:
      - out/prepare/depends.txt

  # 1. Pull labelstudio annotations from S3
  # 2. Merge into a single JSON file
  # 3. Preprocess the annotations
  # 4. Save it into DVC cache
  preprocess:
    cmd: python3 src/1_preprocess.py
    deps:
      - src/1_preprocess.py
      - out/prepare/depends.txt
    outs:
      - out/preprocess/annotations.json
    always_changed: true

  # 1. Pull some images from S3
  # 2. Save them into DVC cache
  preview:
    cmd: python3 src/2_preview.py
    deps:
      - src/2_preview.py
      - out/preprocess/annotations.json
    params:
      - train.datamodule.setup
    outs:
      - out/preview

  # Train the model
  # Note: This step is partially commented out as we do not have sufficient data yet
  #       to train the model
  train:
    cmd: python3 src/2_train.py
    deps:
      - src/2_train.py
      - out/preprocess/annotations.json
      - out/pre-train/model.ckpt
    #   params:
    #     - train.datamodule.setup
    #     - train.model
    #     - train.training
    outs:
      - out/train/model.ckpt
  #     - out/train/lightning_logs:
  #         persist: true
  #   metrics:
  #     - out/train/metrics.json

  # Convert PyTorch model to BentoML model (TorchScript)
  export:
    cmd: python3 src/3_export.py
    deps:
      - src/3_export.py
      - out/train/model.ckpt
    params:
      - train.datamodule.setup.batch_size
      - train.datamodule.setup.image_size
      - export.model_name
    outs:
      - out/export/${export.model_name}.bentomodel

  # Evaluate the model
  evaluate:
    cmd: python3 src/3_evaluate.py
    deps:
      - src/3_evaluate.py
      - out/train/model.ckpt
    params:
      - train.datamodule.setup
    outs:
      - out/evaluate

  # Detect pannels in a TIF image
  detect:
    cmd: python3 src/detect_tif.py
    deps:
      - src/detect_tif.py
      - out/train/model.ckpt
    params:
      - prepare
      - train.datamodule
      - train.model.seed
    outs:
      - out/detect
    frozen: true # this stage is frozen, as we want to run it manually
